Code architecture layout:
At a high-level, this application implements a model-view-controller hierarchy.
In the context of the web application, the models are the objects which interact
with the database, while the controllers are the objects which handle the logic
for the HTTP interactions. The views are marked-up HTML pages, with embedded
Ruby scripts that turn on or off some of the pages. Note that Ruby on Rails
implements what is known as a RESTful architecture, which has implications on
the way HTTP requests are made and handled (in particular, there are other types
of requests than just GET and POST).

- app/controllers
  This directory contains all of the controller implementations. Of particular
  importance is application_controller.rb, which contains the controller from
  which all of controllers are called; as a result, it has lots of helper
  methods which allow the application to decide whether or not a user has the
  permissions to see the current webpage.

- app/helpers
  This directory contains helper modules which allow helper functions to be
  shared across the entire code base, including controllers, models, and views.

- app/models
  This directory contains all of the code that represents manipulatable objects.
  For the time being, all of these are stored in the database to persist among
  browsing sessions, with the exception of UserSession. Many of the properties
  these objects have dictates how they interact with the backend database
  implementation, specifically the relationships they have with other objects.

- app/views
  This directory contains all of the embedded code for the views. Each
  controller is tied to loading from one of these subdirectories; you can
  pretty easily figure out which one by looking at the names of the files.

- app/views/layouts/
  This directory contains the master view layout file, application.html.erb.
  The `<%= yield %>' line is where the actual view for a file will be located,
  and there are other references loaded in the header. In other words, this
  file pretty much lays out the overall view of the documentation, with
  individual views only changing the main content portion.

- config/
  This contains static configuration details for the project. Most of these have
  remained at the defaults when creating a new Rails application; any file
  called out here has changed.

  Some of the configuration files may want to be changed to improve security of
  an installation. But what is there now should work in general.

- config/routes.rb
  This file controlls the mapping of URLs to the actual calls to controller
  classes. In general, the most important routes worth mentioning is that the
  default URL is to call new user_sessions (in other words, logging in), and
  that some of the routes have inheritance properties.

- db/
  This directory contains the runtime databases (if configured to use sqlite),
  as well as the database schema and migration records. There should be no need
  to directly edit anything in here, unless you want to blow away a database for
  some reason.

- doc/
  This directory contains documentation for the library as a whole. When
  documentation is generated, it will be placed in doc/app; things not in that
  directory well be tracked by the source control repository. The *.dot files
  are the underlying code files for the diagrams, and can be regenerated by
  calling dot or neato (for the ER diagram) on them. Note that you need the
  GraphViz tools for them to work properly.

- Gemfile
  Required gems for the code base. With this file, running `bundle install'
  will automatically locate and install these gems for you.

- log/
  Log files when running the code base will be dropped into this directory.

- public/
  These files are the files that will be available to the web server without
  being intepreted by Ruby.

- public/system/
  This is the directory where user-uploaded files will be placed. As such, it is
  not tracked by version control.

- script/
  This contains glue code that makes rails work. You shouldn't need to change
  this file.

- test/
  This contains all of our test code.

- test/fixtures
  This contains files that will prefill database tables for running the tests.

- test/functional
  These tests are run to make sure that the controllers work properly

- test/performance
  These are tests for measuring server performance. As performance is not a goal
  for this application, we do not have any useful tests in here.

- test/unit
  These tests run unit tests on the model code, to make sure that all of the
  functions work properly.

- tmp/
  This directory contains temporary files used when running the server.

- vendor/
  This directory is currently unused.

Guide to development:
The development commands are centered around the use of the rails framework.
The following tasks are the major things that you will probably do over the
course of development:

rake db:migrate
  Migrate the database. This needs to be run whenever someone else updates the
  database code. Indeed, if your code fails for some unknown reason, first try
  running db:migrate and see if it works then. If not, it is then time to start
  debugging in earnest.

rake db:setup
  This sets up the database for the first time. If you ever decide to blow away
  a database by removing it completely, you will need to use this command before
  you can use the application again.

rake doc:app
  This generates the documentation for the code which is then dropped in the
  doc/app subdirectory. We try to always keep the codebase 100.00% documented.

rake test:units
  Runs all unit tests for the code base. Like documentation, we always to keep
  this at 0 failures and 0 errors.

rake test
  Runs all tests, both unit tests and functional tests.

rails server
  Runs the development server on http://localhost:3000/. Hit <Ctrl>-C to stop
  the server.

bundle install
  Install new bundles if the application requires it.
